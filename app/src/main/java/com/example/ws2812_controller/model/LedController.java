package com.example.ws2812_controller.model;

import android.content.Context;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.text.format.Formatter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class LedController {
    private final OkHttpClient client = new OkHttpClient();
    private final Context context;

    public LedController(Context context) {
        this.context = context;
    }

    // üß† L·∫•y IP c·ªßa WiFi hi·ªán t·∫°i
    private String getCurrentWifiIP() {
        WifiManager wifiManager = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        if (wifiManager == null) return null;
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();
        int ipInt = wifiInfo.getIpAddress();
        String deviceIp = Formatter.formatIpAddress(ipInt); // v√≠ d·ª•: 192.168.4.2
        // Gi·∫£ ƒë·ªãnh ESP32 c√≥ IP .1 trong c√πng subnet
        if (deviceIp.contains(".")) {
            String base = deviceIp.substring(0, deviceIp.lastIndexOf('.') + 1);
            return base + "1"; // v√≠ d·ª• -> 192.168.4.1
        }
        return "192.168.4.1";
    }

    // üß© H√†m g·ª≠i POST /led?...
    private String sendCommand(String query) throws IOException {
        String ip = getCurrentWifiIP();
        if (ip == null) return "Error: cannot get WiFi IP";

        String url = "http://" + ip + "/led?" + query;
        Request request = new Request.Builder()
            .url(url)
            .post(RequestBody.create(new byte[0], null))
            .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                return "Error: " + response.code();
            }
            return response.body() != null ? response.body().string() : "No response";
        }
    }

    // Helper: Build query string t·ª´ c√°c tham s·ªë
    private String buildQuery(String mode, Integer r, Integer g, Integer b, Integer brightness, Integer speed) {
        List<String> params = new ArrayList<>();

        // Th·ª© t·ª± kh√¥ng quan tr·ªçng v√¨ Rust parse h·∫øt tr∆∞·ªõc
        // Nh∆∞ng ƒë·ªÉ d·ªÖ ƒë·ªçc, ta gi·ªØ theo th·ª© t·ª±: color -> brightness -> speed -> mode
        if (r != null && g != null && b != null) {
            params.add("r=" + r);
            params.add("g=" + g);
            params.add("b=" + b);
        }

        if (brightness != null) {
            params.add("brightness=" + brightness);
        }

        if (speed != null) {
            params.add("speed=" + speed);
        }

        if (mode != null && !mode.isEmpty()) {
            params.add("mode=" + mode);
        }

        return String.join("&", params);
    }

    // B·∫≠t LED (mode=on v·ªõi brightness)
    public String turnOn() throws IOException {
        return sendCommand(buildQuery("on", null, null, null, 150, null));
    }

    // T·∫Øt LED
    public String turnOff() throws IOException {
        return sendCommand(buildQuery("off", null, null, null, null, null));
    }

    // ƒê·∫∑t m√†u (static mode v·ªõi color)
    public String setColor(int r, int g, int b, int brightness) throws IOException {
        // G·ª≠i c·∫£ color, brightness v√† mode trong 1 request
        return sendCommand(buildQuery("static", r, g, b, brightness, null));
    }

    // Hi·ªáu ·ª©ng rainbow
    public String setRainbow(int brightness) throws IOException {
        return sendCommand(buildQuery("rainbow", null, null, null, brightness, null));
    }

    // Hi·ªáu ·ª©ng blink
    public String setBlink(int brightness, int speed) throws IOException {
        return sendCommand(buildQuery("blink", null, null, null, brightness, speed));
    }

    // Hi·ªáu ·ª©ng aurora
    public String setAurora(int brightness, int speed) throws IOException {
        return sendCommand(buildQuery("aurora", null, null, null, brightness, speed));
    }

    // Hi·ªáu ·ª©ng meteor
    public String setMeteor(int brightness, int speed) throws IOException {
        return sendCommand(buildQuery("meteor", null, null, null, brightness, speed));
    }

    // Ch·ªânh ƒë·ªô s√°ng (kh√¥ng ƒë·ªïi mode)
    public String setBrightness(int brightness) throws IOException {
        return sendCommand(buildQuery(null, null, null, null, brightness, null));
    }

    // Ch·ªânh speed (kh√¥ng ƒë·ªïi mode)
    public String setSpeed(int speed) throws IOException {
        return sendCommand(buildQuery(null, null, null, null, null, speed));
    }

    // Advanced: T√πy ch·ªânh ƒë·∫ßy ƒë·ªß
    public String setCustom(String mode, Integer r, Integer g, Integer b, Integer brightness, Integer speed) throws IOException {
        return sendCommand(buildQuery(mode, r, g, b, brightness, speed));
    }
}